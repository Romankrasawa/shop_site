# Generated by Django 4.1.4 on 2023-01-07 17:46

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import shop.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('laptop', 'Ноутбук'), ('PC', 'Компютер'), ('Phone', 'Телефон'), ('Tablet', 'Планшет'), ('TV', 'Телевізор'), ('Monitor', 'Монітор'), ('Headphones', 'Навушники'), ('Mouse', 'Мишка'), ('Keyboard', 'Клавіатура'), ('Flash Drive', 'Флешка'), ('Watch', 'Годинник'), ('Processor', 'Процессор'), ('Videocard', 'Відеокарта'), ('RAM', 'Оперативна память'), ('Disk', 'Диск'), ('Motherboard', 'Материнська плата'), ('Kuller', 'Система охолодження'), ('Power Block', 'Блок живлення'), ('Case', 'Корпус')], max_length=25, verbose_name='Назва')),
                ('name_plural', models.CharField(choices=[('laptop', 'Ноутбуки'), ('PC', 'Компютери'), ('Phone', 'Телефони'), ('Tablet', 'Планшети'), ('TV', 'Телевізори'), ('Monitor', 'Монітори'), ('Headphones', 'Навушники'), ('Mouse', 'Мишки'), ('Keyboard', 'Клавіатури'), ('Flash Drive', 'Флешки'), ('Watch', 'Годинники'), ('Processor', 'Процессори'), ('Videocard', 'Відеокарти'), ('RAM', 'Оперативна память'), ('Disk', 'Диски'), ('Motherboard', 'Материнські плати'), ('Kuller', 'Системи охолодження'), ('Power Block', 'Блоки живлення'), ('Case', 'Корпуси')], max_length=25, verbose_name='Назва в множині')),
            ],
            options={
                'verbose_name': 'Категорія',
                'verbose_name_plural': 'Категорії',
            },
        ),
        migrations.CreateModel(
            name='Laptop',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('seria', models.CharField(max_length=100, verbose_name='Серія')),
                ('screen_diagonal', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Діагональ екрану')),
                ('screen_type', models.CharField(choices=[('IPS', 'IPS'), ('OLED', 'OLED'), ('TN', 'TN'), ('RETINA', 'Retina'), ('VA', 'VA'), ('IGZO', 'IGZO'), ('LTPS', 'LTPS'), ('Liquid_Retina', 'Liquid Retina'), ('Liquid_Retina_XDR', 'Liquid Retina XDR')], max_length=30, verbose_name='Тип екрану')),
                ('screen_refresh_rate', models.PositiveIntegerField(verbose_name='Частота оновлення екрану')),
                ('resolution', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Розширення екрану повинно бути такого типу: 1920x1080', regex='\\d+x\\d+')], verbose_name='Роздільна здатність')),
                ('integrated_videocard_aviable', models.BooleanField(verbose_name='Наявна інтегрована відеокарта')),
                ('discred_videocard_aviable', models.BooleanField(verbose_name='Наявна дискретна відеокарта')),
                ('videocard_series', models.CharField(max_length=50, verbose_name='Відеокарта')),
                ('videocard_memory', models.PositiveIntegerField(verbose_name='Відео память')),
                ('HDD_aviable', models.BooleanField(verbose_name='HDD диск')),
                ('HDD_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Розмір HDD диску')),
                ('SSD_aviable', models.BooleanField(verbose_name='SSD диск')),
                ('SSD_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Розмір SSD диску')),
                ('RAM_size', models.PositiveIntegerField(verbose_name='Кількість оперативної памяті')),
                ('Ram_type', models.CharField(choices=[('DDR5', 'DDR5'), ('DDR4', 'DDR4'), ('DDR3', 'DDR3'), ('DDR2', 'DDR2')], max_length=4, verbose_name='Тип оперативної памяті')),
                ('RAM_slots', models.PositiveIntegerField(verbose_name='Кількість розємів для оперативної памяті')),
                ('processor', models.CharField(max_length=50, verbose_name='Процессор')),
                ('processor_hertz', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Частота процессора')),
                ('cores_num', models.PositiveIntegerField(verbose_name='Кількість ядер')),
                ('OS', models.CharField(choices=[('WIN7', 'Віндовс 7'), ('WIN8', 'Віндовс 8'), ('WIN10PRO', 'Віндовс 10 Pro'), ('WIN10HOME', 'Віндовс 10 Home'), ('MAC', 'Мак ОС'), ('LIN', 'Лінукс'), ('WITHOUTOS', 'Без операційної системи')], max_length=9, verbose_name='Операційна система')),
                ('wifi_adapter', models.BooleanField(verbose_name='Wifi адаптер')),
                ('bluetooth_adpter', models.BooleanField(verbose_name='Bluetooth адаптер')),
                ('web_camera', models.BooleanField(verbose_name='Веб камера')),
                ('optical_drive', models.BooleanField(verbose_name='Оптичний привід')),
                ('fingerprint_scaner', models.BooleanField(verbose_name='Сканер відбитку пальця')),
                ('backlight', models.BooleanField(verbose_name='Підсвітка')),
                ('connectors_ports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=20, verbose_name='Розєми та порти')),
                ('colour', models.CharField(choices=[('WHITE', 'Білий'), ('BLACK', 'Чорний'), ('RED', 'Червоний'), ('BLUE', 'Синій'), ('PINK', 'Рожевий'), ('SILVER', 'Сріблястий'), ('VIOLET', 'Фіолетовий'), ('GRAY', 'Сірий'), ('GOLD', 'Золотий'), ('BROWN', 'Коричневий'), ('GREEN', 'Зелений'), ('ORANGE', 'Оранжений'), ('PAINTING', 'Малюнок')], max_length=8, verbose_name='Колір')),
                ('material', models.CharField(choices=[('Metal', 'Метал'), ('Plastic', 'Пластик'), ('Glass', 'Скло'), ('Other', 'Інше')], max_length=15, verbose_name='Матеріал')),
                ('acumulator_size', models.IntegerField(verbose_name='Обєм акумулятора')),
                ('width', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Ширина')),
                ('height', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Висота')),
                ('lenght', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Довжина')),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Вага')),
            ],
            options={
                'verbose_name': 'Ноутбук',
                'verbose_name_plural': 'Ноутбуки',
            },
        ),
        migrations.CreateModel(
            name='PC',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('chipset', models.CharField(max_length=30, verbose_name='Чіпсет материнської плати')),
                ('integrated_videocard_aviable', models.BooleanField(verbose_name='Наявна інтегрована відеокарта')),
                ('discred_videocard_aviable', models.BooleanField(verbose_name='Наявна дискретна відеокарта')),
                ('videocard_series', models.CharField(max_length=50, verbose_name='Відеокарта')),
                ('videocard_memory', models.PositiveIntegerField(verbose_name='Відео память')),
                ('HDD_aviable', models.BooleanField(verbose_name='HDD диск')),
                ('HDD_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Розмір HDD диску')),
                ('SSD_aviable', models.BooleanField(verbose_name='SSD диск')),
                ('SSD_size', models.PositiveIntegerField(blank=True, null=True, verbose_name='Розмір SSD диску')),
                ('RAM_size', models.PositiveIntegerField(verbose_name='Кількість оперативної памяті')),
                ('Ram_type', models.CharField(choices=[('DDR5', 'DDR5'), ('DDR4', 'DDR4'), ('DDR3', 'DDR3'), ('DDR2', 'DDR2')], max_length=4, verbose_name='Тип оперативної памяті')),
                ('RAM_slots', models.PositiveIntegerField(verbose_name='Кількість розємів для оперативної памяті')),
                ('processor', models.CharField(max_length=50, verbose_name='Процессор')),
                ('processor_hertz', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Частота процессора')),
                ('cores_num', models.PositiveIntegerField(verbose_name='Кількість ядер')),
                ('capacity_of_power_block', models.PositiveIntegerField(verbose_name='Потужність Блоку живлення')),
                ('OS', models.CharField(choices=[('WIN7', 'Віндовс 7'), ('WIN8', 'Віндовс 8'), ('WIN10PRO', 'Віндовс 10 Pro'), ('WIN10HOME', 'Віндовс 10 Home'), ('MAC', 'Мак ОС'), ('LIN', 'Лінукс'), ('WITHOUTOS', 'Без операційної системи')], max_length=9, verbose_name='Операційна система')),
                ('wifi_adapter', models.BooleanField(verbose_name='Wifi адаптер')),
                ('bluetooth_adpter', models.BooleanField(verbose_name='Bluetooth адаптер')),
                ('optical_drive', models.BooleanField(verbose_name='Оптичний привід')),
                ('backlight', models.BooleanField(verbose_name='Підсвітка')),
                ('connectors_ports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=20, verbose_name='Розєми та порти')),
                ('colour', models.CharField(choices=[('WHITE', 'Білий'), ('BLACK', 'Чорний'), ('RED', 'Червоний'), ('BLUE', 'Синій'), ('PINK', 'Рожевий'), ('SILVER', 'Сріблястий'), ('VIOLET', 'Фіолетовий'), ('GRAY', 'Сірий'), ('GOLD', 'Золотий'), ('BROWN', 'Коричневий'), ('GREEN', 'Зелений'), ('ORANGE', 'Оранжений'), ('PAINTING', 'Малюнок')], max_length=8, verbose_name='Колір')),
                ('material', models.CharField(choices=[('Metal', 'Метал'), ('Plastic', 'Пластик'), ('Glass', 'Скло'), ('Other', 'Інше')], max_length=15, verbose_name='Матеріал')),
                ('width', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Ширина')),
                ('height', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Висота')),
                ('lenght', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Довжина')),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Вага')),
            ],
            options={
                'verbose_name': 'Пк',
                'verbose_name_plural': 'Пк',
            },
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('seria', models.CharField(max_length=100, verbose_name='Серія')),
                ('G2', models.BooleanField(verbose_name='2G(GPRS/EDGE)')),
                ('G3', models.BooleanField(verbose_name='3G(WCDMA/UMTS/HSPA)')),
                ('LTE', models.BooleanField(verbose_name='4G(LTE)')),
                ('G5', models.BooleanField(verbose_name='5G')),
                ('eSIM', models.BooleanField(verbose_name='eSIM')),
                ('sim_num', models.PositiveIntegerField(verbose_name='Кількість слотів для sim карт')),
                ('sim_type', models.CharField(choices=[('Mini_SIM', 'Mini SIM'), ('Micro_SIM', 'Micro SIM'), ('Nano_SIM', 'Nano SIM')], max_length=10, verbose_name='Розмір sim карти')),
                ('screen_diagonal', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Діагональ екрану')),
                ('screen_type', models.CharField(choices=[('IPS', 'IPS'), ('OLED', 'OLED'), ('TN', 'TN'), ('RETINA', 'Retina'), ('VA', 'VA'), ('IGZO', 'IGZO'), ('LTPS', 'LTPS'), ('Liquid_Retina', 'Liquid Retina'), ('Liquid_Retina_XDR', 'Liquid Retina XDR')], max_length=30, verbose_name='Тип екрану')),
                ('screen_refresh_rate', models.PositiveIntegerField(verbose_name='Частота оновлення екрану')),
                ('resolution', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Розширення екрану повинно бути такого типу: 1920x1080', regex='\\d+x\\d+')], verbose_name='Роздільна здатність')),
                ('videocore', models.CharField(max_length=50, verbose_name='Відеоядро')),
                ('RAM_size', models.PositiveIntegerField(verbose_name='Кількість оперативної памяті')),
                ('MicroSD_aviable', models.BooleanField(verbose_name='Наявність MicroSD')),
                ('MicroSD_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Максимальний розмір MicroSD')),
                ('storage', models.PositiveIntegerField(verbose_name='Кількість вбудованої памяті')),
                ('processor', models.CharField(max_length=50, verbose_name='Процессор')),
                ('processor_hertz', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Частота процессора')),
                ('cores_num', models.IntegerField(verbose_name='Кількість ядер')),
                ('OS', models.CharField(choices=[('IOS', 'IOS'), ('Android_4', 'Android 4'), ('Android_5', 'Android 5'), ('Android_6', 'Android 6'), ('Android_7', 'Android 7'), ('Android_8', 'Android 8'), ('Android_9', 'Android 9'), ('Android_10', 'Android 10'), ('Android_11', 'Android 11'), ('Android_12', 'Android 12'), ('Android_13', 'Android 13'), ('Windows_Mobile', 'Windows Mobile'), ('Other', 'Інше')], max_length=14, verbose_name='Операційна система')),
                ('wifi_adapter', models.BooleanField(verbose_name='Wifi адаптер')),
                ('bluetooth_adpter', models.BooleanField(verbose_name='Bluetooth адаптер')),
                ('NFC', models.BooleanField(verbose_name='NFC')),
                ('GPS', models.BooleanField(verbose_name='GPS')),
                ('wireless_charging', models.BooleanField(verbose_name='Безпровідна зарядка')),
                ('face_scaner', models.BooleanField(verbose_name='Розблокування за обличчям')),
                ('flashlight', models.BooleanField(verbose_name='Фанарик')),
                ('fingerprint_scaner', models.BooleanField(verbose_name='Сканер відбитку пальця')),
                ('main_camera', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), size=10, verbose_name='Основна камера')),
                ('front_camera', models.PositiveIntegerField(verbose_name='Фронтальна камера')),
                ('camera_features', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=20, verbose_name='Особливосві камери')),
                ('connectors_ports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=20, verbose_name='Розєми та порти')),
                ('colour', models.CharField(choices=[('WHITE', 'Білий'), ('BLACK', 'Чорний'), ('RED', 'Червоний'), ('BLUE', 'Синій'), ('PINK', 'Рожевий'), ('SILVER', 'Сріблястий'), ('VIOLET', 'Фіолетовий'), ('GRAY', 'Сірий'), ('GOLD', 'Золотий'), ('BROWN', 'Коричневий'), ('GREEN', 'Зелений'), ('ORANGE', 'Оранжений'), ('PAINTING', 'Малюнок')], max_length=8, verbose_name='Колір')),
                ('material', models.CharField(choices=[('Metal', 'Метал'), ('Plastic', 'Пластик'), ('Glass', 'Скло'), ('Other', 'Інше')], max_length=15, verbose_name='Матеріал')),
                ('acumulator_size', models.IntegerField(verbose_name='Обєм акумулятора')),
                ('width', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Ширина')),
                ('height', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Висота')),
                ('lenght', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Довжина')),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Вага')),
            ],
            options={
                'verbose_name': 'Телефон',
                'verbose_name_plural': 'Телефони',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('code', models.CharField(default=shop.models.create_product_code, editable=False, max_length=10, primary_key=True, serialize=False, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('brend', models.CharField(max_length=50, verbose_name='Бренд')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Назва')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Створено')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Оновлено')),
                ('search_name', models.CharField(blank=True, max_length=100, verbose_name='Назва для пошуку')),
                ('price', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Ціна')),
                ('on_sale', models.BooleanField(verbose_name='На акції')),
                ('sale_price', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Акція')),
                ('description', models.CharField(max_length=2500, verbose_name='Опис')),
                ('number_aviable', models.PositiveIntegerField(verbose_name='Кількість')),
                ('producing_country', models.CharField(choices=[('UA', 'Україна'), ('USA', 'Сполучені Штати'), ('JPN', 'Японія'), ('KOR', 'Південна Корея'), ('DE', 'Німеччина'), ('SG', 'Сінгапур'), ('UK', 'Великобританія'), ('SE', 'Швеція'), ('IE', 'Ірландія'), ('IL', 'Ізраїль'), ('CA', 'Канада'), ('CH', 'Швейцарія'), ('FI', 'Фінляндія'), ('FR', 'Франція'), ('NL', 'Нідерланди'), ('NO', 'Норвегія'), ('CZ', 'Чехія'), ('DK', 'Данія'), ('IN', 'Індія'), ('ID', 'Індонезія'), ('AE', 'Арабські Імірати'), ('ASTL', 'Австралія'), ('AUST', 'Австрія'), ('IT', 'Італія'), ('ES', 'Іспанія'), ('PK', 'Пакістан'), ('RUS', 'росія')], max_length=4, verbose_name='Країна виробник')),
                ('complect', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=20, verbose_name='Комплектація')),
                ('garanty', models.PositiveIntegerField(verbose_name='Гарантія')),
                ('views', models.PositiveIntegerField(verbose_name='Перегляди')),
                ('object_id', models.UUIDField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product', to='shop.category', verbose_name='Категорія')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товари',
            },
        ),
        migrations.CreateModel(
            name='Tablet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('seria', models.CharField(max_length=100, verbose_name='Серія')),
                ('G2', models.BooleanField(verbose_name='2G(GPRS/EDGE)')),
                ('G3', models.BooleanField(verbose_name='3G(WCDMA/UMTS/HSPA)')),
                ('LTE', models.BooleanField(verbose_name='4G(LTE)')),
                ('G5', models.BooleanField(verbose_name='5G')),
                ('eSIM', models.BooleanField(verbose_name='eSIM')),
                ('sim_num', models.PositiveIntegerField(verbose_name='Кількість слотів для sim карт')),
                ('sim_type', models.CharField(choices=[('Mini_SIM', 'Mini SIM'), ('Micro_SIM', 'Micro SIM'), ('Nano_SIM', 'Nano SIM')], max_length=10, verbose_name='Розмір sim карти')),
                ('screen_diagonal', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Діагональ екрану')),
                ('screen_type', models.CharField(choices=[('IPS', 'IPS'), ('OLED', 'OLED'), ('TN', 'TN'), ('RETINA', 'Retina'), ('VA', 'VA'), ('IGZO', 'IGZO'), ('LTPS', 'LTPS'), ('Liquid_Retina', 'Liquid Retina'), ('Liquid_Retina_XDR', 'Liquid Retina XDR')], max_length=30, verbose_name='Тип екрану')),
                ('screen_refresh_rate', models.PositiveIntegerField(verbose_name='Частота оновлення екрану')),
                ('resolution', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Розширення екрану повинно бути такого типу: 1920x1080', regex='\\d+x\\d+')], verbose_name='Роздільна здатність')),
                ('videocore', models.CharField(max_length=50, verbose_name='Відеоядро')),
                ('RAM_size', models.PositiveIntegerField(verbose_name='Кількість оперативної памяті')),
                ('MicroSD_aviable', models.BooleanField(verbose_name='Наявність MicroSD')),
                ('MicroSD_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Максимальний розмір MicroSD')),
                ('storage', models.PositiveIntegerField(verbose_name='Кількість вбудованої памяті')),
                ('processor', models.CharField(max_length=50, verbose_name='Процессор')),
                ('processor_hertz', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Частота процессора')),
                ('cores_num', models.IntegerField(verbose_name='Кількість ядер')),
                ('OS', models.CharField(choices=[('IOS', 'IOS'), ('Android_4', 'Android 4'), ('Android_5', 'Android 5'), ('Android_6', 'Android 6'), ('Android_7', 'Android 7'), ('Android_8', 'Android 8'), ('Android_9', 'Android 9'), ('Android_10', 'Android 10'), ('Android_11', 'Android 11'), ('Android_12', 'Android 12'), ('Android_13', 'Android 13'), ('Windows_Mobile', 'Windows Mobile'), ('Other', 'Інше')], max_length=14, verbose_name='Операційна система')),
                ('wifi_adapter', models.BooleanField(verbose_name='Wifi адаптер')),
                ('bluetooth_adpter', models.BooleanField(verbose_name='Bluetooth адаптер')),
                ('NFC', models.BooleanField(verbose_name='NFC')),
                ('GPS', models.BooleanField(verbose_name='GPS')),
                ('wireless_charging', models.BooleanField(verbose_name='Безпровідна зарядка')),
                ('face_scaner', models.BooleanField(verbose_name='Розблокування за обличчям')),
                ('flashlight', models.BooleanField(verbose_name='Фанарик')),
                ('fingerprint_scaner', models.BooleanField(verbose_name='Сканер відбитку пальця')),
                ('main_camera', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveIntegerField(), size=10, verbose_name='Основна камера')),
                ('front_camera', models.PositiveIntegerField(verbose_name='Фронтальна камера')),
                ('camera_features', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=20, verbose_name='Особливосві камери')),
                ('connectors_ports', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=20, verbose_name='Розєми та порти')),
                ('colour', models.CharField(choices=[('WHITE', 'Білий'), ('BLACK', 'Чорний'), ('RED', 'Червоний'), ('BLUE', 'Синій'), ('PINK', 'Рожевий'), ('SILVER', 'Сріблястий'), ('VIOLET', 'Фіолетовий'), ('GRAY', 'Сірий'), ('GOLD', 'Золотий'), ('BROWN', 'Коричневий'), ('GREEN', 'Зелений'), ('ORANGE', 'Оранжений'), ('PAINTING', 'Малюнок')], max_length=8, verbose_name='Колір')),
                ('material', models.CharField(choices=[('Metal', 'Метал'), ('Plastic', 'Пластик'), ('Glass', 'Скло'), ('Other', 'Інше')], max_length=15, verbose_name='Матеріал')),
                ('acumulator_size', models.IntegerField(verbose_name='Обєм акумулятора')),
                ('width', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Ширина')),
                ('height', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Висота')),
                ('lenght', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Довжина')),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Вага')),
            ],
            options={
                'verbose_name': 'Планшет',
                'verbose_name_plural': 'Планшети',
            },
        ),
        migrations.CreateModel(
            name='Product_photo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('photo', models.ImageField(default='default/default_photo.jpg', upload_to=shop.models.photos_file_name, verbose_name='Фото')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_photo', to='shop.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Фото товару',
                'verbose_name_plural': 'Фото товарів',
            },
        ),
        migrations.AddConstraint(
            model_name='pc',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('HDD_aviable', False), ('SSD_aviable', True)), models.Q(('HDD_aviable', True), ('SSD_aviable', False)), models.Q(('HDD_aviable', True), ('SSD_aviable', True)), _connector='OR'), name='ПК. Повинний бути вибраний хоча б один диск'),
        ),
        migrations.AddConstraint(
            model_name='pc',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('discred_videocard_aviable', False), ('integrated_videocard_aviable', True)), models.Q(('discred_videocard_aviable', True), ('integrated_videocard_aviable', False)), models.Q(('discred_videocard_aviable', True), ('integrated_videocard_aviable', True)), _connector='OR'), name='ПК. Повинна бути вибрана хоча б одна відеокарта'),
        ),
        migrations.AddConstraint(
            model_name='laptop',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('HDD_aviable', False), ('SSD_aviable', True)), models.Q(('HDD_aviable', True), ('SSD_aviable', False)), models.Q(('HDD_aviable', True), ('SSD_aviable', True)), _connector='OR'), name='Ноутбук. Повинний бути вибраний хоча б один диск'),
        ),
        migrations.AddConstraint(
            model_name='laptop',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('discred_videocard_aviable', False), ('integrated_videocard_aviable', True)), models.Q(('discred_videocard_aviable', True), ('integrated_videocard_aviable', False)), models.Q(('discred_videocard_aviable', True), ('integrated_videocard_aviable', True)), _connector='OR'), name='Ноутбук. Повинна бути вибрана хоча б одна відеокарта'),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together={('content_type', 'object_id')},
        ),
    ]
